//---------------------------------------------------------------------------------------------------------
// ▽ Submarine Mirage Framework for Unity
//		Copyright (c) 2020 夢想海の水底より(from Seabed of Reverie)
//		Released under the MIT License :
//			https://github.com/FromSeabedOfReverie/SubmarineMirageFrameworkForUnity/blob/master/LICENSE
//---------------------------------------------------------------------------------------------------------
namespace SubmarineMirage.Data {
	using System;
	///====================================================================================================
	/// <summary>
	/// ■ クラス情報の管理クラス
	///----------------------------------------------------------------------------------------------------
	///		クラス名のType型が鍵の、辞書に格納する。
	///		様々な情報管理クラスを纏める際に、継承する。
	/// </summary>
	///====================================================================================================
	public class ClassDataManager<TValue> : BaseDataManager<Type, TValue> where TValue : IBaseData {
		///------------------------------------------------------------------------------------------------
		/// ● 要素
		///------------------------------------------------------------------------------------------------
		
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● 登録（クラス名鍵を推定）
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public void Register<T>( T data ) where T : TValue {
			var key = data.GetType();
			Register( key, data );
		}
		///------------------------------------------------------------------------------------------------
		/// ● 登録解除
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● 登録解除（クラス名）
		/// </summary>
		public void Unregister<T>() {
			var key = typeof( T );
			base.Unregister( key );
		}
		/// <summary>
		/// ● 登録解除（指定情報から、クラス名鍵を推定）
		/// </summary>
		public void Unregister<T>( T data ) where T : TValue {
			var key = data.GetType();
			base.Unregister( key );
		}
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● 取得（クラス名鍵を推定）
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public T Get<T>() where T : TValue {
			var key = typeof( T );
			return (T)Get( key );
		}
	}
}