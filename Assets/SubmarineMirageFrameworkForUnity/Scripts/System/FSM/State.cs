//---------------------------------------------------------------------------------------------------------
// ▽ Submarine Mirage Framework for Unity
//		Copyright (c) 2020 夢想海の水底より(from Seabed of Reverie)
//		Released under the MIT License :
//			https://github.com/FromSeabedOfReverie/SubmarineMirageFrameworkForUnity/blob/master/LICENSE
//---------------------------------------------------------------------------------------------------------
namespace SubmarineMirageFramework.FSM {
	using System.Collections;
	///====================================================================================================
	/// <summary>
	/// ■ 状態のクラス
	///----------------------------------------------------------------------------------------------------
	///		有限状態機械への参照を所持する為、ジェネリッククラスとなっている。
	/// </summary>
	///====================================================================================================
	public class State<TOwner, TFSM>
		where TOwner : IFiniteStateMachineOwner<TFSM>
		where TFSM : IFiniteStateMachine
	{
		///------------------------------------------------------------------------------------------------
		/// ● 要素
		///------------------------------------------------------------------------------------------------
		/// <summary>運用者</summary>
		protected TOwner _owner { get; private set; }
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● コンストラクタ
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public State( TOwner owner ) {
			_owner = owner;
		}
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● 入口（呼戻）
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public virtual IEnumerator OnEnter() {
			yield break;
		}
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● 更新（呼戻）
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public virtual IEnumerator OnUpdate() {
			while ( true ) {
				yield return null;
			}
		}
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● 更新（微分）（呼戻）
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public virtual void OnUpdateDelta() {
		}
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● 出口（呼戻）
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public virtual IEnumerator OnExit() {
			yield break;
		}
	}
}