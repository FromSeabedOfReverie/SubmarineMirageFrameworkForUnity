//---------------------------------------------------------------------------------------------------------
// ▽ Submarine Mirage Framework for Unity
//		Copyright (c) 2020 夢想海の水底より(from Seabed of Reverie)
//		Released under the MIT License :
//			https://github.com/FromSeabedOfReverie/SubmarineMirageFrameworkForUnity/blob/master/LICENSE
//---------------------------------------------------------------------------------------------------------
namespace SubmarineMirageFramework.Extension {
	using UnityEngine;
	///====================================================================================================
	/// <summary>
	/// ■ ベクトルの拡張クラス
	///----------------------------------------------------------------------------------------------------
	/// </summary>
	///====================================================================================================
	public static class VectorExtension {
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● 除算（2次元ベクトル）
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public static Vector2 Div( this Vector2 a, Vector2 b ) {
			return new Vector2( a.x / b.x, a.y / b.y );
		}
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● 乗算（2次元ベクトル）
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public static Vector2 Mult( this Vector2 a, Vector2 b ) {
			return new Vector2( a.x * b.x, a.y * b.y );
		}
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● 小数切り上げ（2次元ベクトル）
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public static Vector2 Ceil( this Vector2 a ) {
			return new Vector2( Mathf.Ceil( a.x ), Mathf.Ceil( a.y ) );
		}
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● より小さい（2次元ベクトル）
		///	 大きさの比較ではない
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public static bool IsLess( this Vector2 a, Vector2 b ) {
			return (
				a.x < b.x &&
				a.y < b.y
			);
		}
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● より大きい（2次元ベクトル）
		///	 大きさの比較ではない
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public static bool IsGreater( this Vector2 a, Vector2 b ) {
			return (
				a.x > b.x &&
				a.y > b.y
			);
		}
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● より小さい（詳細）（2次元ベクトル）
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public static bool[] IsLessDetails( this Vector2 a, Vector2 b ) {
			return new bool[] {
				a.x < b.x,
				a.y < b.y
			};
		}
		///------------------------------------------------------------------------------------------------
		/// <summary>
		/// ● より大きい（詳細）（2次元ベクトル）
		/// </summary>
		///------------------------------------------------------------------------------------------------
		public static bool[] IsGreaterDetails( this Vector2 a, Vector2 b ) {
			return new bool[] {
				a.x > b.x,
				a.y > b.y
			};
		}
	}
}